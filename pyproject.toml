[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[project]
name = "spoofspy"
dynamic = ["version"]
description = "Experimental app for detecting and displaying spoofed redirect servers on Steam."
readme = "README.md"
requires-python = ">=3.11"
license-files = { paths = ["LICENSE"] }
keywords = []
authors = [
  { name = "Tuomo Kriikkula", email = "tuokri@tuta.io" },
]
classifiers = [
  "Development Status :: 4 - Beta",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
]

# TODO: pendulum is needed by some other package.
#   Fails to build on 3.12 if not specified explicitly.
# TODO: split dependencies into optional groups
#  based on sub-packages. This would allow installing the sub-packages
#  without installing other sub-packages' dependencies. E.g.
#  `api` should be able to be installed and ran without installing
#  `jobs` dependencies that are not shared by both packages.
# TODO: need to reorganize quite a bit to achieve the above?
# TODO: is it even worth it?
dependencies = [
  "SQLAlchemy[asyncio]==2.0.38",
  "celery==5.4.0",
  "fastapi-cache2==0.2.2",
  "fastapi==0.115.8",
  "gevent==24.11.1",
  "httpx==0.27.2",
  "icmplib==3.0.4",
  "msgpack==1.1.0",
  "numpy==2.2.1",
  "orjson==3.10.11",
  "pendulum==3.0.0",
  "psutil==6.1.1",
  "psycopg==3.2.3",
  "python-a2s==1.3.0",
  "redis[hiredis]==5.2.1",
  "sentry-sdk[celery]==2.19.2",
  "uvicorn[standard]==0.34.2",
  "zstandard==0.23.0",
]
[project.optional-dependencies]
dev = [
  "hatch",
  "mypy",
  "ruff",
]
api = [
]
db = [
]
jobs = [
]
all = [
  "api",
  "db",
  "jobs",
]

[project.urls]
Documentation = "https://github.com/tuokri/spoofspy#readme"
Issues = "https://github.com/tuokri/spoofspy/issues"
Source = "https://github.com/tuokri/spoofspy"

[tool.hatch.version]
source = "vcs"

[tool.hatch.build.hooks.vcs]
version-file = "spoofspy/_version.py"

[tool.hatch.metadata]
allow-direct-references = true

#[tool.hatch.envs.default]
#dependencies = [
#  "coverage[toml]>=6.5",
#  "pytest",
#]
#
#[tool.hatch.envs.default.scripts]
#test = "pytest {args:tests}"
#test-cov = "coverage run -m pytest {args:tests}"
#cov-report = [
#  "- coverage combine",
#  "coverage report",
#]
#cov = [
#  "test-cov",
#  "cov-report",
#]

#[[tool.hatch.envs.all.matrix]]
#python = ["3.11", "3.12"]
#
#[tool.hatch.envs.lint]
#detached = true
#dependencies = [
#  "black>=23.1.0",
#  "mypy>=1.0.0",
#  "ruff>=0.0.243",
#]
#[tool.hatch.envs.lint.scripts]
#typing = "mypy --install-types --non-interactive {args:spoofspy tests}"
#style = [
#  "ruff {args:.}",
#  "black --check --diff {args:.}",
#]
#fmt = [
#  "black {args:.}",
#  "ruff --fix {args:.}",
#  "style",
#]
#all = [
#  "style",
#  "typing",
#]
#
#[tool.black]
#target-version = ["py37"]
#line-length = 120
#skip-string-normalization = true
#
#[tool.ruff]
#target-version = "py37"
#line-length = 120
#select = [
#  "A",
#  "ARG",
#  "B",
#  "C",
#  "DTZ",
#  "E",
#  "EM",
#  "F",
#  "FBT",
#  "I",
#  "ICN",
#  "ISC",
#  "N",
#  "PLC",
#  "PLE",
#  "PLR",
#  "PLW",
#  "Q",
#  "RUF",
#  "S",
#  "T",
#  "TID",
#  "UP",
#  "W",
#  "YTT",
#]
#ignore = [
#  # Allow non-abstract empty methods in abstract base classes
#  "B027",
#  # Allow boolean positional values in function calls, like `dict.get(... True)`
#  "FBT003",
#  # Ignore checks for possible passwords
#  "S105", "S106", "S107",
#  # Ignore complexity
#  "C901", "PLR0911", "PLR0912", "PLR0913", "PLR0915",
#]
#unfixable = [
#  # Don't touch unused imports
#  "F401",
#]
#
#[tool.ruff.isort]
#known-first-party = ["spoofspy"]
#
#[tool.ruff.flake8-tidy-imports]
#ban-relative-imports = "all"
#
#[tool.ruff.per-file-ignores]
## Tests can use magic values, assertions, and relative imports
#"tests/**/*" = ["PLR2004", "S101", "TID252"]
#
#[tool.coverage.run]
#source_pkgs = ["spoofspy", "tests"]
#branch = true
#parallel = true
#omit = [
#  "spoofspy/__about__.py",
#]
#
#[tool.coverage.paths]
#spoofspy = ["spoofspy", "*/spoofspy/spoofspy"]
#tests = ["tests", "*/spoofspy/tests"]
#
#[tool.coverage.report]
#exclude_lines = [
#  "no cov",
#  "if __name__ == .__main__.:",
#  "if TYPE_CHECKING:",
#]
